/**
 * Generated by orval v6.10.2 🍺
 * Do not edit manually.
 * labs-api
 * 
This project provides a reference Python API built using FastAPI, the 
aim of the project is:

- To maintain a good know source of habits
- Demonstrate how applications are meant to be put together at Anomaly
- Democratize design of robust API


 * OpenAPI spec version: 0.1.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getInitiateOtpEmailMock = () => ({success: faker.datatype.boolean()})

export const getInitiateOtpSmsMock = () => ({success: faker.datatype.boolean()})

export const getLoginUserMock = () => ({accessToken: faker.random.word(), refreshToken: faker.random.word(), tokenType: faker.random.word(), expiresIn: faker.datatype.number({min: undefined, max: undefined})})

export const getRefreshJwtTokenMock = () => ({accessToken: faker.random.word(), refreshToken: faker.random.word(), tokenType: faker.random.word(), expiresIn: faker.datatype.number({min: undefined, max: undefined})})

export const getGetMeMock = () => ({createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.datatype.uuid(), email: faker.helpers.arrayElement([faker.random.word(), undefined]), mobileNumber: faker.helpers.arrayElement([faker.random.word(), undefined]), verified: faker.datatype.boolean(), firstName: faker.helpers.arrayElement([faker.random.word(), undefined]), lastName: faker.helpers.arrayElement([faker.random.word(), undefined])})

export const getAuthMSW = () => [
rest.post('*/auth/signup', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/auth/verify', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/auth/otp/initiate/email', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getInitiateOtpEmailMock()),
        )
      }),rest.post('*/auth/otp/initiate/sms', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getInitiateOtpSmsMock()),
        )
      }),rest.post('*/auth/otp/verify', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/auth/login', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getLoginUserMock()),
        )
      }),rest.post('*/auth/refresh', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getRefreshJwtTokenMock()),
        )
      }),rest.post('*/auth/logout', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/auth/me', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetMeMock()),
        )
      }),]
