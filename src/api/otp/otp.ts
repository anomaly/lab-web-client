/**
 * Generated by orval v6.10.2 üç∫
 * Do not edit manually.
 * labs-api
 * 
This project provides a reference Python API built using FastAPI, the 
aim of the project is:

- To maintain a good know source of habits
- Demonstrate how applications are meant to be put together at Anomaly
- Democratize design of robust API


 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useMutation
} from 'react-query'
import type {
  UseMutationOptions,
  MutationFunction
} from 'react-query'
import type {
  OTPTriggerResponse,
  HTTPValidationError,
  OTPTriggerEmailRequest,
  OTPTriggerSMSRequest,
  OTPVerifyRequest
} from '.././models'


/**
 * Attempt to authenticate a user and issue JWT token

The user has provided us their email address and we will
attempt to authenticate them via OTP.
 * @summary Initiate Otp Email
 */
export const initiateOtpEmail = (
    oTPTriggerEmailRequest: OTPTriggerEmailRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OTPTriggerResponse>> => {
    return axios.post(
      `/otp/initiate/email`,
      oTPTriggerEmailRequest,options
    );
  }



    export type InitiateOtpEmailMutationResult = NonNullable<Awaited<ReturnType<typeof initiateOtpEmail>>>
    export type InitiateOtpEmailMutationBody = OTPTriggerEmailRequest
    export type InitiateOtpEmailMutationError = AxiosError<HTTPValidationError>

    export const useInitiateOtpEmail = <TError = AxiosError<HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiateOtpEmail>>, TError,{data: OTPTriggerEmailRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initiateOtpEmail>>, {data: OTPTriggerEmailRequest}> = (props) => {
          const {data} = props ?? {};

          return  initiateOtpEmail(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof initiateOtpEmail>>, TError, {data: OTPTriggerEmailRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Attempt to authenticate a user and issue JWT token

The user has provided a mobile number and we will text them
their OTP and let them login.
 * @summary Initiate Otp Sms
 */
export const initiateOtpSms = (
    oTPTriggerSMSRequest: OTPTriggerSMSRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<OTPTriggerResponse>> => {
    return axios.post(
      `/otp/initiate/sms`,
      oTPTriggerSMSRequest,options
    );
  }



    export type InitiateOtpSmsMutationResult = NonNullable<Awaited<ReturnType<typeof initiateOtpSms>>>
    export type InitiateOtpSmsMutationBody = OTPTriggerSMSRequest
    export type InitiateOtpSmsMutationError = AxiosError<HTTPValidationError>

    export const useInitiateOtpSms = <TError = AxiosError<HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initiateOtpSms>>, TError,{data: OTPTriggerSMSRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initiateOtpSms>>, {data: OTPTriggerSMSRequest}> = (props) => {
          const {data} = props ?? {};

          return  initiateOtpSms(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof initiateOtpSms>>, TError, {data: OTPTriggerSMSRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Attempt to authenticate a user and issue JWT token
 * @summary Verify Otp
 */
export const verifyOtp = (
    oTPVerifyRequest: OTPVerifyRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.post(
      `/otp/verify`,
      oTPVerifyRequest,options
    );
  }



    export type VerifyOtpMutationResult = NonNullable<Awaited<ReturnType<typeof verifyOtp>>>
    export type VerifyOtpMutationBody = OTPVerifyRequest
    export type VerifyOtpMutationError = AxiosError<HTTPValidationError>

    export const useVerifyOtp = <TError = AxiosError<HTTPValidationError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyOtp>>, TError,{data: OTPVerifyRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyOtp>>, {data: OTPVerifyRequest}> = (props) => {
          const {data} = props ?? {};

          return  verifyOtp(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof verifyOtp>>, TError, {data: OTPVerifyRequest}, TContext>(mutationFn, mutationOptions)
    }
    